{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNiSjDVC/ffkHgzk4vrL17l"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"HDE74CXX5ChI"},"source":["## Segment 1: Introduction to Probability"]},{"cell_type":"code","metadata":{"id":"kzRpCm2a5ChJ","executionInfo":{"status":"ok","timestamp":1679698084861,"user_tz":240,"elapsed":2307,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"source":["import numpy as np\n","import scipy.stats as st\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U_680ypO5ChJ"},"source":["### What Probability Theory Is"]},{"cell_type":"markdown","source":["#### Events and Sample Spaces"],"metadata":{"id":"uqzuaq1oD1XV"}},{"cell_type":"markdown","metadata":{"id":"fwEAqIqR5ChJ"},"source":["Let's assume we have a fair coin, which is equally likely to come up heads (H) or tails (T)."]},{"cell_type":"markdown","metadata":{"id":"kFl3g0GW5ChK"},"source":["In instances like this, where the two outcomes are equally likely, we can use probability theory to express the likelihood of a particular **event** by comparing it with the **sample space** (the set of all possible outcomes; can be denoted as $\\Omega$): "]},{"cell_type":"markdown","metadata":{"id":"X82RIGz15ChK"},"source":["$$ P(\\text{event}) = \\frac{\\text{# of outcomes of event}}{\\text{# of outcomes in }\\Omega} $$"]},{"cell_type":"markdown","metadata":{"id":"VuVWT8NI5ChK"},"source":["If we're only flipping the coin once, then there are only two possible outcomes in the sample space $\\Omega$: it will either be H or T (using set notation, we could write this as $\\Omega$ = {H, T})."]},{"cell_type":"markdown","metadata":{"id":"9W5MsKt15ChK"},"source":["Therefore: $$ P(H) = \\frac{1}{2} = 0.5 $$"]},{"cell_type":"markdown","metadata":{"id":"V_bzjMvs5ChK"},"source":["Equally: $$ P(T) = \\frac{1}{2} = 0.5 $$"]},{"cell_type":"markdown","metadata":{"id":"PfHEQzcd5ChL"},"source":["As a separate example, consider drawing a single card from a standard deck of 52 playing cards. In this case, the number of possible outcomes in the sample space $\\Omega$ is 52. "]},{"cell_type":"markdown","metadata":{"id":"qtAa3aRW5ChL"},"source":["There is only one ace of spades in the deck, so the probability of drawing it is: $$ P(\\text{ace of spades}) = \\frac{1}{52} \\approx 0.019 $$"]},{"cell_type":"markdown","metadata":{"id":"81-uQ4ug5ChL"},"source":["In contrast there are four aces, so the probability of drawing an ace is: $$ P(\\text{ace}) = \\frac{4}{52} \\approx 0.077 $$"]},{"cell_type":"markdown","metadata":{"id":"uqco79Cd5ChL"},"source":["Some additional examples: \n","$$ P(\\text{spade}) = \\frac{13}{52} = 0.25 $$\n","$$ P(\\text{ace OR spade}) = \\frac{16}{52} \\approx 0.307 $$\n","$$ P(\\text{card}) = \\frac{52}{52} = 1 $$\n","$$ P(\\text{turnip}) = \\frac{0}{52} = 0 $$"]},{"cell_type":"markdown","metadata":{"id":"snINg1tz5ChL"},"source":["#### Multiple Independent Observations"]},{"cell_type":"markdown","metadata":{"id":"gIPR6og95ChL"},"source":["Let's return to coin flipping to illustrate situations where we have an event consisting of multiple independent observations. For example, the probability of throwing two consecutive heads is: $$ P(\\text{HH}) = \\frac{1}{4} = 0.25 $$ ...because there is one HH event in the sample set of four possible events ($\\Omega$ = {HH, HT, TH, TT})."]},{"cell_type":"markdown","metadata":{"id":"rT11_oHg5ChM"},"source":["Likewise, the probability of throwing *three* consecutive heads is: $$ P(\\text{HHH}) = \\frac{1}{8} = 0.125 $$ ...because there is one HHH event in the sample set of eight possible events ($\\Omega$ = {HHH, HHT, HTH, THH, HTT, THT, TTH, TTT})."]},{"cell_type":"markdown","metadata":{"id":"ru44PKUe5ChM"},"source":["As final examples, the probability of throwing exactly two heads in three tosses is $ P = \\frac{3}{8} = 0.375 $ while the probability of throwing at least two heads in three tosses is $ P = \\frac{4}{8} = 0.5 $."]},{"cell_type":"markdown","metadata":{"id":"vh3WnRhm5ChM"},"source":["#### Combining Probabilities"]},{"cell_type":"markdown","metadata":{"id":"YInbLu1i5ChM"},"source":["In order to combine probabilities, we can multiply them. So the probability of throwing five consecutive heads, for example, is the product of probabilities we've already calculated: $$ P(\\text{HHHHH}) = P(\\text{HH}) \\times P(\\text{HHH}) = \\frac{1}{4} \\times \\frac{1}{8} = \\frac{1}{32} \\approx 0.031 $$"]},{"cell_type":"markdown","metadata":{"id":"w-wlHpI05ChM"},"source":["#### Combinatorics"]},{"cell_type":"markdown","metadata":{"id":"1ckSVU3p5ChM"},"source":["*Combinatorics* is a field of mathematics devoted to counting that can be helpful to studying probabilities. We can use **factorials** (e.g., $4! = 4 \\times 3 \\times 2 \\times 1 = 24$), which feature prominently in combinatorics, to calculate probabilities instead of painstakingly determining all of the members of the sample space $\\Omega$ and counting subsets within $\\Omega$. "]},{"cell_type":"markdown","metadata":{"id":"zYL4ODP75ChN"},"source":["More specifically, we can calculate the number of outcomes of an event using the \"number of combinations\" equation: $$ {n \\choose k} = \\frac{n!}{k!(n - k)!} $$"]},{"cell_type":"markdown","metadata":{"id":"kQhpdNEL5ChN"},"source":["The left-hand side of the equation is read \"$n$ choose $k$\" and is most quickly understood via an example: If we have three coin flips, $n = 3$, and if we're interested in the number of ways to get two head flips (or two tail flips, for that matter), $k = 2$. We would read this as \"3 choose 2\" and calculate it as:\n","$$ {n \\choose k} = {3 \\choose 2} = \\frac{3!}{2!(3 - 2)!} = \\frac{3!}{(2!)(1!)} = \\frac{3 \\times 2 \\times 1}{(2 \\times 1)(1)} = \\frac{6}{(2)(1)} = \\frac{6}{2} = 3 $$"]},{"cell_type":"markdown","metadata":{"id":"PoPfNW275ChN"},"source":["This provide us with the numerator for event-probability equation from above: $$ P(\\text{event}) = \\frac{\\text{# of outcomes of event}}{\\text{# of outcomes in }\\Omega} $$"]},{"cell_type":"markdown","metadata":{"id":"ThoyCpl35ChO"},"source":["In the case of coin-flipping (or any binary process with equally probable outcomes), the denominator can be calculated with $2^n$ (where $n$ is again the number of coin flips), so: $$ \\frac{\\text{# of outcomes of event}}{\\text{# of outcomes in }\\Omega} = \\frac{3}{2^n} = \\frac{3}{2^3} = \\frac{3}{8} = 0.375 $$"]},{"cell_type":"markdown","metadata":{"id":"QKRugWrQ5ChO"},"source":["**Exercises**:\n","\n","1. What is the probability of drawing the ace of spades twice in a row? (Assume that any card drawn on the first draw will be put back in the deck before the second draw.)\n","2. You draw a card from a deck of cards. After replacing the drawn card back in the deck and shuffling thoroughly, what is the probability of drawing the same card again? \n","3. Use $n \\choose k$ to calculate the probability of throwing three heads in five coin tosses.\n","4. Create a Python method that solves exercise 3 and incorporates the $n \\choose k$ formula $\\frac{n!}{k!(n - k)!}$. With the method in hand, calculate the probability of -- in five tosses -- throwing each of zero, one, two, three, four, and five heads."]},{"cell_type":"markdown","metadata":{"id":"X1d1mBjR5ChO"},"source":["**Spoiler alert**: Solutions are below so scroll carefully..."]},{"cell_type":"code","metadata":{"id":"_ZzjXjHy5ChO","executionInfo":{"status":"ok","timestamp":1679698084861,"user_tz":240,"elapsed":4,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"bf810450-1324-4e65-820d-14bf572db960","colab":{"base_uri":"https://localhost:8080/"}},"source":["#1.\n","Ace_of_spade_2x = (1/52)*(1/52)\n","Ace_of_spade_2x *100"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.03698224852071006"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"sbq5esRv5ChO","executionInfo":{"status":"ok","timestamp":1679698085243,"user_tz":240,"elapsed":384,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"source":["#2\n","prob_of_any_card = 1/52 # From a shuffled deck"],"execution_count":3,"outputs":[]},{"cell_type":"code","source":["#3\n","from math import factorial\n","#(5 3) = 5!/3!(2!)\n","number_of_outcomes = factorial(5)/((factorial(3))*(factorial(2)))\n","\n","probability = number_of_outcomes/(2**5)\n","probability"],"metadata":{"id":"ru1t8_LRajrP","executionInfo":{"status":"ok","timestamp":1679698085243,"user_tz":240,"elapsed":6,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"a2837698-0950-47c3-aba5-da1c7d446380","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3125"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#4\n","def prob_heads(n):\n","    number_of_outcomes = factorial(5)/((factorial(n))*(factorial(5-n)))\n","    return number_of_outcomes/(2**5)\n","# for i in [0,1,2,3,4,5]:\n","#     print(prob_heads(i))\n","[prob_heads(i) for i in range(6)]"],"metadata":{"id":"1UGIpLpbajZf","executionInfo":{"status":"ok","timestamp":1679698085244,"user_tz":240,"elapsed":4,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"3fbc20f4-d7e9-4a5c-93e4-7f9ac70c92b2","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.03125, 0.15625, 0.3125, 0.3125, 0.15625, 0.03125]"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"U7IgNJwV5ChO"},"source":["**Solutions**:"]},{"cell_type":"markdown","metadata":{"id":"qiSjQ1mR5ChP"},"source":["1. $$ P(\\text{ace of spades}) \\times P(\\text{ace of spades}) = \\left(\\frac{1}{52}\\right)^2 = \\frac{1}{2704} = 0.00037 = 0.037\\% $$"]},{"cell_type":"markdown","metadata":{"id":"R3aUyZvi5ChP"},"source":["2. $$ P(\\text{any card}) = \\frac{52}{52} = 1 $$\n","$$ P(\\text{same card as first draw}) = \\frac{1}{52} \\approx 0.019 $$\n","$$ P(\\text{any card})P(\\text{same card as first draw}) = (1)(\\frac{1}{52}) = \\frac{1}{52} \\approx 0.019$$"]},{"cell_type":"markdown","metadata":{"id":"S8tA4XlQ5ChP"},"source":["3. $$ {n \\choose k} = {5 \\choose 3} = \\frac{5!}{3!(5 - 3)!} = \\frac{5!}{(3!)(2!)} = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{(3 \\times 2 \\times 1)(2 \\times 1)} = \\frac{120}{(6)(2)} = \\frac{120}{12} = 10 $$"]},{"cell_type":"markdown","metadata":{"id":"aS4bc83U5ChP"},"source":["$$P = \\frac{10}{2^n} = \\frac{10}{2^5} = \\frac{10}{32} = 0.3125 $$"]},{"cell_type":"markdown","metadata":{"id":"yE9dOjGFTjMY"},"source":["#### The Law of Large Numbers"]},{"cell_type":"markdown","metadata":{"id":"BLjO9dI3TjMY"},"source":["While a fair coin should land heads up 50% of the time, as we've seen above, with small sample sizes, there is a non-trivial possibility that in a given experiment we could flip heads on all of the tosses. For example, we've calculated that there's a 3.1% chance that we'll get heads on every toss in a small five-toss experiment. "]},{"cell_type":"markdown","metadata":{"id":"ioH83QRvTjMY"},"source":["The **law of large numbers** states that the more experiments we run, the closer we will tend to get to the expected probability. "]},{"cell_type":"markdown","metadata":{"id":"dLcHuspBTjMY"},"source":["Let's run some code to examine this in practice. To start, we'll create a vector of exponentially increasing $n$umbers of coin tosses per experiment: "]},{"cell_type":"code","metadata":{"id":"7TBUyx1aTjMY"},"source":["ns = np.array([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MOwoHhNHTjMZ"},"source":["np.random.seed(42) # for reproducibility"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CbFnutJyTjMZ"},"source":["We will discuss the `binomial()` method in more detail in *Segment 2*. For now it suffices to think of its two arguments as *number of coin flips in experiment* and *probability of heads*, while it returns the number of flips that are heads in the experiment."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"outputId":"839d733e-ed1d-42d1-b90a-143e2cc46fb4","executionInfo":{"status":"ok","timestamp":1677278157969,"user_tz":300,"elapsed":8,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"id":"k6agjcjcTjMZ"},"source":["np.random.binomial(1, 0.5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"outputId":"12d3c2a9-72bd-44a6-c701-5f88bd192193","executionInfo":{"status":"ok","timestamp":1677278157970,"user_tz":300,"elapsed":8,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"id":"1-KtVK6CTjMZ"},"source":["heads_count = [np.random.binomial(n, 0.5) for n in ns]\n","heads_count"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 3, 4, 6, 13, 27, 54, 136, 258, 509, 1038, 2094]"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7a7eafef-6bb6-41c1-92ac-a49bcc3a63a6","executionInfo":{"status":"ok","timestamp":1677278157970,"user_tz":300,"elapsed":6,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"id":"sarlDr8UTjMZ"},"source":["proportion_heads = heads_count/ns\n","proportion_heads"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.        , 0.75      , 0.5       , 0.375     , 0.40625   ,\n","       0.421875  , 0.421875  , 0.53125   , 0.50390625, 0.49707031,\n","       0.50683594, 0.51123047])"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"outputId":"f539894d-b196-41e3-e14e-9dce8119ea3c","executionInfo":{"status":"ok","timestamp":1677278158157,"user_tz":300,"elapsed":192,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"id":"7-lxxYzBTjMZ"},"source":["fig, ax = plt.subplots()\n","plt.xlabel('Number of coin flips in experiment')\n","plt.ylabel('Proportion of flips that are heads')\n","plt.axhline(0.5, color='orange')\n","_ = ax.scatter(ns, proportion_heads)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"h1L5S2YoTjMZ"},"source":["It is important at this juncture to address the **gambler's fallacy**. It is a common misconception that the law of large numbers dictates that if, say, five heads have been flipped in a row, then the probability of tails is higher on the sixth flip. In fact, probability theory holds that each coin flip is completely independent of all others. Thus, every single flip of a fair coin has a 50% chance of being heads, no matter what happened on preceding flips."]},{"cell_type":"markdown","metadata":{"id":"lUs7rEXuTjMa"},"source":["(To capitalize on this misunderstanding, roulette tables at casinos often have prominent displays tracking the history of red versus black even though there's a 47.4% chance of each on every spin of the roulette wheel no matter what happened on preceding spins. Gamblers will note, say, five reds in a row at a given table and flock to it to bet on black.) "]},{"cell_type":"code","source":[],"metadata":{"id":"Y8CkU-AST6JA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hKciO43C5ChT"},"source":["#### Statistics"]},{"cell_type":"markdown","metadata":{"id":"WqitDIkk5ChT"},"source":["The field of statistics applies probability theory to make inferences with a quantifiable degree of confidence. For example, let's say we ran the five-coin-flip experiment 1000 times with a fair coin: "]},{"cell_type":"code","metadata":{"id":"Nvc9rCnq5ChT"},"source":["n_experiments = 1000\n","heads_count = np.random.binomial(5, 0.5, n_experiments)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"siW-zTqm5ChT"},"source":["We can plot the results of our experiment to create a **probability distribution**: "]},{"cell_type":"code","metadata":{"id":"FRiZSpwy5ChT"},"source":["heads, event_count = np.unique(heads_count, return_counts=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8TEmy-_c5ChT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"eac2601f-455e-40eb-e3eb-fcf543dec583","executionInfo":{"status":"ok","timestamp":1677278158300,"user_tz":300,"elapsed":6,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"source":["heads"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4, 5])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"Yn5wlP-A5ChU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e828f1c7-756e-4f53-b381-0c7ef667bcbf","executionInfo":{"status":"ok","timestamp":1677278158301,"user_tz":300,"elapsed":7,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"source":["event_count"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 33, 181, 285, 313, 160,  28])"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"LaBGlw-95ChU","outputId":"5d26c056-d442-4296-bdca-93a8105618f3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677278158301,"user_tz":300,"elapsed":5,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"source":["event_proba = event_count/n_experiments\n","event_proba"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.033, 0.181, 0.285, 0.313, 0.16 , 0.028])"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"ecU6IMfE5ChU","colab":{"base_uri":"https://localhost:8080/","height":279},"outputId":"78c9bcb6-d855-42f0-8c83-52883bc548bc","executionInfo":{"status":"ok","timestamp":1677278158425,"user_tz":300,"elapsed":127,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"source":["plt.bar(heads, event_proba, color='mediumpurple')\n","plt.xlabel('Heads flips (out of 5 tosses)')\n","_ = plt.ylabel('Event probability')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["### Expected Value"],"metadata":{"id":"jTEhDmVvjzsJ"}},{"cell_type":"code","metadata":{"id":"XOyKNFZw5ChV","colab":{"base_uri":"https://localhost:8080/","height":262},"outputId":"6fc6ef2d-aba6-4ee4-d3b7-08683bb1f5d3","executionInfo":{"status":"error","timestamp":1678215567759,"user_tz":300,"elapsed":5,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"source":["P = [coinflip_prob(5, x) for x in range(6)]\n","P"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-0b7b91911cb0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mP\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcoinflip_prob\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mP\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-1-0b7b91911cb0>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mP\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcoinflip_prob\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mP\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'coinflip_prob' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"XCCclUvR5ChV"},"source":["From the slides:\n","$$ \\mathbb{E} = \\sum_x xP(x) $$"]},{"cell_type":"code","metadata":{"id":"37gjROzg5ChV","colab":{"base_uri":"https://localhost:8080/"},"outputId":"fef29d34-1027-4db5-c717-52ac399679bf"},"source":["E = sum([P[x]*x for x in range(6)])\n","E"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.5"]},"metadata":{},"execution_count":19}]}]}