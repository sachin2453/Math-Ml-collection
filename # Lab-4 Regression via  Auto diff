{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNroTR2zT5OD8ZREVzC3/yD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Regression in PyTorch "],"metadata":{"id":"GbHTJuUXSVr0"}},{"cell_type":"markdown","source":["In this notebook, we use the PyTorch **automatic differentiation** library to fit a straight line to data points. Thus, here we use calculus to solve the same regression problem that we used the Moore-Penrose Pseudoinverse to solve in the [*Linear Algebra II* notebook](https://github.com/jonkrohn/ML-foundations/blob/master/notebooks/2-linear-algebra-ii.ipynb)."],"metadata":{"id":"jqtfRB9iPtZS"}},{"cell_type":"code","source":["import torch\n","import matplotlib.pyplot as plt\n","x = torch.tensor([0, 1, 2, 3, 4, 5, 6, 7.]) # E.g.: Dosage of drug for treating Alzheimer's disease\n","y = torch.tensor([1.86, 1.31, .62, .33, .09, -.67, -1.23, -1.37]) # E.g.: Patient's \"forgetfulness score\"\n","x, y"],"metadata":{"id":"aRC5bdDyPy6-","executionInfo":{"status":"ok","timestamp":1679611438182,"user_tz":240,"elapsed":3368,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"41bd7d58-2201-42a0-c30d-ec4811f598b7"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([0., 1., 2., 3., 4., 5., 6., 7.]),\n"," tensor([ 1.8600,  1.3100,  0.6200,  0.3300,  0.0900, -0.6700, -1.2300, -1.3700]))"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["fig, ax = plt.subplots()\n","plt.title('Clinical Trial')\n","plt.xlabel('Drug dosage (mL)')\n","plt.ylabel('Forgetfulness')\n","_ = ax.scatter(x, y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"e4-EJA74Qyuo","executionInfo":{"status":"ok","timestamp":1679611438660,"user_tz":240,"elapsed":480,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"950cba0d-eaf2-494e-88fe-260b1973e64d"},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["Initialize the slope parameter $m$ with a \"random\" value of 0.9...\n","\n","\n","We could guess approximately-correct parameter values to start with. Or, we could use an algebraic (e.g., Moore-Penrose pseudoinverse) or statistical (e.g., ordinary-least-squares regression) to solve for the parameters quickly. This tiny machine learning demo with two parameters and eight data points scales, however, to millions of parameters and millions of data points. The other approaches -- guessing, algebra, statistics -- do not come close to scaling in this way.)"],"metadata":{"id":"DJ4wJwg4Q43v"}},{"cell_type":"code","source":["m = torch.tensor([.8]).requires_grad_()\n","b = torch.tensor([0.2]).requires_grad_()"],"metadata":{"id":"Xo28uKL1Q4m6","executionInfo":{"status":"ok","timestamp":1679611438661,"user_tz":240,"elapsed":8,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["def regression(x, m, b):\n","    return m*x + b"],"metadata":{"id":"GrZmLtv5RnEG","executionInfo":{"status":"ok","timestamp":1679611438662,"user_tz":240,"elapsed":8,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def regression_plot(x, y, m, b):\n","    \n","    fig, ax = plt.subplots()\n","    ax.scatter(x, y)\n","    plt.title('Clinical Trial')\n","    plt.xlabel('Drug dosage (mL)')\n","    plt.ylabel('Forgetfulness')\n","    x_min, x_max = ax.get_xlim()\n","    y_min = regression(x_min, m, b).detach().item()\n","    y_max = regression(x_max, m, b).detach().item()\n","    ax.set_xlim([x_min, x_max])\n","    _ = ax.plot([x_min, x_max], [y_min, y_max])"],"metadata":{"id":"EaRc0KTHRojD","executionInfo":{"status":"ok","timestamp":1679611438857,"user_tz":240,"elapsed":202,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["regression_plot(x, y, m, b) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"cyorXCuSRslB","executionInfo":{"status":"ok","timestamp":1679611439579,"user_tz":240,"elapsed":924,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"d80ae4ce-020c-45ed-8860-f7b9da70a75a"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Machine Learning auto diff in 4 steps\n"],"metadata":{"id":"Z3raje0-SPRU"}},{"cell_type":"markdown","source":["### **Step 1**: Forward pass"],"metadata":{"id":"Avqs9FVBYQxO"}},{"cell_type":"code","source":["ŷ = regression(x, m, b)\n","ŷ"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OGE0nDIyYRN2","executionInfo":{"status":"ok","timestamp":1679611439579,"user_tz":240,"elapsed":21,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"82e6b399-f092-470e-f713-f06394df8f14"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([0.2000, 1.0000, 1.8000, 2.6000, 3.4000, 4.2000, 5.0000, 5.8000],\n","       grad_fn=<AddBackward0>)"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["### **Step 2**: Compare $\\hat{y}$ with true $y$ to calculate cost $C$"],"metadata":{"id":"da1aE1KsaJv7"}},{"cell_type":"markdown","source":["There is a PyTorch `MeanSquaredErrorLoss` method, but let's define it outselves to see how it works. MSE cost is defined by: $$C = \\frac{1}{n} \\sum_{i=1}^n (\\hat{y_i}-y_i)^2 $$"],"metadata":{"id":"CwojG5BYaOeF"}},{"cell_type":"code","source":["def mse(ŷ, y): \n","    sigma = torch.sum(( ŷ - y)**2)\n","    return sigma/len( ŷ)\n","\n","C = mse( ŷ, y)\n","C"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HhxEs_PcaKnu","executionInfo":{"status":"ok","timestamp":1679611439580,"user_tz":240,"elapsed":16,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"d563e4b7-9b2f-465f-cd61-17756ba75dbc"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(16.7865, grad_fn=<DivBackward0>)"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"avZjfPNQ09hD"},"source":["### **Step 3**: Use autodiff to calculate gradient of $C$ w.r.t. parameters"]},{"cell_type":"code","source":["C.backward()"],"metadata":{"id":"SYY1HmcSbsSB","executionInfo":{"status":"ok","timestamp":1679611439580,"user_tz":240,"elapsed":10,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["m.grad"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u_EhKH2-bvmT","executionInfo":{"status":"ok","timestamp":1679611440400,"user_tz":240,"elapsed":829,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"58253f51-29af-457a-807b-2051290d0858"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([33.5050])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["b.grad"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AQx_ru69bxDT","executionInfo":{"status":"ok","timestamp":1679611440401,"user_tz":240,"elapsed":9,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"1785a918-13d7-49a4-bdaa-c88d133ef7f4"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([5.7650])"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["**Step 4**: Gradient descent"],"metadata":{"id":"KFcA0IJwbyxw"}},{"cell_type":"code","source":["optimizer = torch.optim.SGD([m, b], lr=0.01)"],"metadata":{"id":"YTkYFJ3KcDX_","executionInfo":{"status":"ok","timestamp":1679611441643,"user_tz":240,"elapsed":152,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["optimizer.step()"],"metadata":{"id":"3gCvwz_pcE6h","executionInfo":{"status":"ok","timestamp":1679611444493,"user_tz":240,"elapsed":601,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["Confirm parameters have been adjusted sensibly: "],"metadata":{"id":"fWj2VFjLcISP"}},{"cell_type":"code","source":["m"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uNq3TZ4zcHqM","executionInfo":{"status":"ok","timestamp":1679611445514,"user_tz":240,"elapsed":213,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"57cdc3b9-bb91-4293-a0a6-f15966c5894c"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([0.4649], requires_grad=True)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["b"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VjKMesUIcKyl","executionInfo":{"status":"ok","timestamp":1679611446321,"user_tz":240,"elapsed":2,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"81e4c9dc-b855-414a-997c-786d1ab2ddd2"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([0.1424], requires_grad=True)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["regression_plot(x, y, m, b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"cWnzTlBGchD6","executionInfo":{"status":"ok","timestamp":1679611449245,"user_tz":240,"elapsed":694,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"2aeb112e-24fa-4432-8eec-c76a1567c1cf"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["C = mse(regression(x, m, b), y)\n","C"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tuDPazv7cmWG","executionInfo":{"status":"ok","timestamp":1679611453683,"user_tz":240,"elapsed":582,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"5fce29d1-fb14-4148-a4c9-a8ddaf043eb8"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(7.3313, grad_fn=<DivBackward0>)"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["Each time a dataset passes through an algorithm, it is said to have completed an epoch. Therefore, Epoch, in machine learning, refers to the one entire passing of training data through the algorithm. It's a hyperparameter that determines the process of training the machine learning model."],"metadata":{"id":"Red4hye3qmG9"}},{"cell_type":"code","source":["epochs = 1000\n","for epoch in range(epochs):\n","    \n","    optimizer.zero_grad() # Reset gradients to zero; else they accumulate\n","    \n","    yhat = regression(x, m, b) # Step 1\n","    C = mse(yhat, y) # Step 2\n","    \n","    C.backward() # Step 3\n","    optimizer.step() # Step 4\n","    if epoch == 999:\n","      print('Epoch {}, cost {}, m grad {}, b grad {}'.format(epoch, '%.3g' % C.item(), '%.3g' % m.grad.item(), '%.3g' % b.grad.item()))"],"metadata":{"id":"85tXz-bycquL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1679611731494,"user_tz":240,"elapsed":346,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"f3fd6c54-7b2c-4dbe-cb3a-03ce6f4fd904"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 999, cost 0.0195, m grad 1.37e-06, b grad -5.81e-06\n"]}]},{"cell_type":"code","source":["regression_plot(x, y, m, b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"aY12Wx3Sc1wE","executionInfo":{"status":"ok","timestamp":1679611569633,"user_tz":240,"elapsed":981,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"2a3fe80c-e7c0-413a-edc7-42b885a45cd6"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["m.item()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jqpfji3LcwOU","executionInfo":{"status":"ok","timestamp":1679611840351,"user_tz":240,"elapsed":154,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"587be3cf-1f51-4041-f1b3-61fd8b0bf8d4"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.4692836403846741"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["b.item()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SCzwsIOQcxwE","executionInfo":{"status":"ok","timestamp":1679611841828,"user_tz":240,"elapsed":197,"user":{"displayName":"Sachin Raj","userId":"09458302739464736107"}},"outputId":"56afb64c-f117-4298-ed87-9d07446eb6ef"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.759989857673645"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"GfoFI9-x09hG"},"source":["**N.B.**: The model doesn't perfectly approximate the slope (-0.5) and $y$-intercept (2.0) used to simulate the outcomes $y$ at the top of this notebook. This reflects the imperfectness of the sample of eight data points due to adding random noise during the simulation step. In the real world, the best solution would be to sample additional data points: The more data we sample, the more accurate our estimates of the true underlying parameters will be. "]},{"cell_type":"markdown","source":["The $y$ values were created using the equation of a line $y = mx + b$. This way, we know what the model parameters to be learned are, say, $m = -0.5$ and $b = 2$. Random, normally-distributed noise has been added to simulate sampling error: \n","\n","\n"," // y = -0.5*x + 2 + torch.normal(mean=torch.zeros(8), std=0.2)"],"metadata":{"id":"4PDeKokQPzkW"}}]}